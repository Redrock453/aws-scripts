#!/usr/bin/env bash
set -euo pipefail

AWS_REGION_CACHE="/tmp/aws_regions.cache"
AWS_AMI_CACHE="/tmp/aws_ami.cache"
CACHE_TTL=86400 # 24h

DEFAULT_INSTANCE_TYPE="t2.micro"
DEFAULT_KEY_NAME="simplevpn-key"
DEFAULT_SG_NAME="SimpleVPN-SG"

BOT_TOKEN_DEFAULT="PUT_YOUR_TELEGRAM_BOT_TOKEN_HERE"
OUTLINE_API_URL_DEFAULT="https://IP:9090/xxxxxxxxxxxxxxxxxx/"

pause() {
    read -rp $'\n–ù–∞—Ç–∏—Å–Ω–∏ Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏‚Ä¶'
}

require_aws() {
    if ! command -v aws &>/dev/null; then
        echo "‚ùå AWS CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤–∏: apt install -y awscli –∞–±–æ pkg install awscli"
        exit 1
    fi
}

now_ts() { date +%s; }
file_mtime() { stat -c %Y "$1" 2>/dev/null || echo 0; }

get_regions() {
    if [[ -f "$AWS_REGION_CACHE" && $(( $(now_ts) - $(file_mtime "$AWS_REGION_CACHE") )) -lt $CACHE_TTL ]]; then
        mapfile -t REGIONS < "$AWS_REGION_CACHE"
    else
        mapfile -t REGIONS < <(aws ec2 describe-regions --query "Regions[].RegionName" --output text)
        printf "%s\n" "${REGIONS[@]}" > "$AWS_REGION_CACHE"
    fi
}

select_region() {
    get_regions
    echo "=== –û–±–µ—Ä–∏ —Ä–µ–≥—ñ–æ–Ω ==="
    local i=1
    for r in "${REGIONS[@]}"; do
        printf "%2d) %s\n" "$i" "$r"
        ((i++))
    done
    local choice
    while true; do
        read -rp "–ù–æ–º–µ—Ä: " choice
        if [[ "$choice" =~ ^[0-9]+$ ]] && ((choice>0 && choice<=${#REGIONS[@]})); then
            REGION="${REGIONS[choice-1]}"
            break
        else
            echo "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä!"
        fi
    done
}

get_latest_ubuntu_ami() {
    local region="$1"
    local AMI_ID=""
    if [[ -f "$AWS_AMI_CACHE" && $(( $(now_ts) - $(file_mtime "$AWS_AMI_CACHE") )) -lt $CACHE_TTL ]]; then
        AMI_ID=$(awk -v r="$region" '$1==r{print $2}' "$AWS_AMI_CACHE")
    fi
    if [[ -z "$AMI_ID" ]]; then
        AMI_ID=$(aws ec2 describe-images \
            --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-22.04-amd64-server-*" \
            --query 'Images[].[ImageId,CreationDate]' \
            --region "$region" \
            --output text | sort -k2 -r | head -n1 | cut -f1)
        echo "$region $AMI_ID" >> "$AWS_AMI_CACHE"
    fi
    echo "$AMI_ID"
}

ensure_keypair() {
    local region="$1" key_name="$2"
    if ! aws ec2 describe-key-pairs --key-names "$key_name" --region "$region" &>/dev/null; then
        echo "üîê –°—Ç–≤–æ—Ä—é—é key-pair: $key_name"
        aws ec2 create-key-pair --key-name "$key_name" --region "$region" \
            --query 'KeyMaterial' --output text > "${key_name}.pem"
        chmod 400 "${key_name}.pem"
        echo "‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —É: ${key_name}.pem"
    else
        echo "üîë Key-pair $key_name –≤–∂–µ —ñ—Å–Ω—É—î (region: $region)"
    fi
}

ensure_sg() {
    local region="$1" sg_name="$2"
    local sg_id
    sg_id=$(aws ec2 describe-security-groups --region "$region" \
        --query "SecurityGroups[?GroupName=='$sg_name'].GroupId" --output text 2>/dev/null || true)
    if [[ -z "$sg_id" || "$sg_id" == "None" ]]; then
        echo "üõ° –°—Ç–≤–æ—Ä—é—é security group: $sg_name"
        sg_id=$(aws ec2 create-security-group --group-name "$sg_name" \
            --description "SimpleVPN SG" --region "$region" --output text)
        for p in 22 80 443 9090 51820; do
            aws ec2 authorize-security-group-ingress --region "$region" --group-id "$sg_id" \
                --protocol tcp --port "$p" --cidr 0.0.0.0/0 >/dev/null
        done
        aws ec2 authorize-security-group-ingress --region "$region" --group-id "$sg_id" \
            --protocol udp --port 51820 --cidr 0.0.0.0/0 >/dev/null
        echo "‚úÖ SG —Å—Ç–≤–æ—Ä–µ–Ω–æ: $sg_id"
    else
        echo "üõ° SG —ñ—Å–Ω—É—î: $sg_id"
    fi
    echo "$sg_id"
}

gen_cloud_init() {
    local bot_token="$1" outline_api="$2"
    cat <<CLOUD
#cloud-config
package_update: true
package_upgrade: true
packages:
  - git
  - python3
  - python3-pip
  - ufw
runcmd:
  - ufw allow 22
  - ufw allow 80
  - ufw allow 443
  - ufw allow 9090
  - ufw allow 51820/tcp
  - ufw allow 51820/udp
  - ufw --force enable
  - cd /opt && git clone -b dev https://github.com/Redrock453/SimpleVPN.git || true
  - cd /opt/SimpleVPN/bot && pip3 install -r requirements.txt
  - bash -c "echo \"TOKEN='$bot_token'\" > /opt/SimpleVPN/bot/config.py"
  - bash -c "echo \"OUTLINE_API_URL='$outline_api'\" >> /opt/SimpleVPN/bot/config.py"
  - nohup python3 /opt/SimpleVPN/bot/client_bot.py >/var/log/simplevpn_bot.log 2>&1 &
CLOUD
}

terminate_instances_bulk() {
    select_region
    echo "üìã –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ InstanceId (—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª):"
    read -ra INSTANCE_IDS
    if [[ ${#INSTANCE_IDS[@]} -eq 0 ]]; then
        echo "‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ InstanceId!"
        return 1
    fi
    aws ec2 terminate-instances --instance-ids "${INSTANCE_IDS[@]}" --region "$REGION" --output table
}

terminate_instances_by_name() {
    select_region
    read -rp "–í–≤–µ–¥–∏ —ñ–º'—è —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ (Tag:Name): " NAME_TAG
    echo "üîç –ü–æ—à—É–∫ —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ –∑ —ñ–º'—è–º: $NAME_TAG"
    mapfile -t INSTANCE_IDS < <(aws ec2 describe-instances --region "$REGION" \
        --filters "Name=tag:Name,Values=$NAME_TAG" "Name=instance-state-name,Values=running,stopped,pending" \
        --query "Reservations[].Instances[].InstanceId" --output text)
    if [[ ${#INSTANCE_IDS[@]} -eq 0 ]]; then
        echo "‚ùå –Ü–Ω—Å—Ç–∞–Ω—Å–∏ –∑ —ñ–º'—è–º '$NAME_TAG' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        return 1
    fi
    aws ec2 terminate-instances --instance-ids "${INSTANCE_IDS[@]}" --region "$REGION" --output table
}

create_instance() {
    select_region
    read -rp "–í–∫–∞–∂–∏ —Ç–∏–ø —ñ–Ω—Å—Ç–∞–Ω—Å–∞ [$DEFAULT_INSTANCE_TYPE]: " INSTANCE_TYPE
    INSTANCE_TYPE=${INSTANCE_TYPE:-$DEFAULT_INSTANCE_TYPE}

    read -rp "–Ü–º'—è –∫–ª—é—á–∞ [$DEFAULT_KEY_NAME]: " KEY_NAME
    KEY_NAME=${KEY_NAME:-$DEFAULT_KEY_NAME}
    ensure_keypair "$REGION" "$KEY_NAME"

    read -rp "–Ü–º'—è security group [$DEFAULT_SG_NAME]: " SG_NAME
    SG_NAME=${SG_NAME:-$DEFAULT_SG_NAME}
    SG_ID=$(ensure_sg "$REGION" "$SG_NAME")

    AMI_ID=$(get_latest_ubuntu_ami "$REGION")
    if [[ -z "$AMI_ID" ]]; then
        echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Ubuntu AMI!"
        return 1
    fi

    read -rp "Telegram BOT TOKEN [$BOT_TOKEN_DEFAULT]: " BOT_TOKEN
    BOT_TOKEN=${BOT_TOKEN:-$BOT_TOKEN_DEFAULT}
    read -rp "Outline API URL [$OUTLINE_API_URL_DEFAULT]: " OUTLINE_API_URL
    OUTLINE_API_URL=${OUTLINE_API_URL:-$OUTLINE_API_URL_DEFAULT}

    USER_DATA_FILE=$(mktemp)
    gen_cloud_init "$BOT_TOKEN" "$OUTLINE_API_URL" > "$USER_DATA_FILE"

    aws ec2 run-instances \
        --image-id "$AMI_ID" \
        --count 1 \
        --instance-type "$INSTANCE_TYPE" \
        --key-name "$KEY_NAME" \
        --security-group-ids "$SG_ID" \
        --region "$REGION" \
        --user-data "file://$USER_DATA_FILE" \
        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=SimpleVPN}]" \
        --output table

    echo "‚è≥ –ß–µ–∫–∞—é 15 —Å–µ–∫..."
    sleep 15
    IP=$(aws ec2 describe-instances --region "$REGION" \
        --filters "Name=tag:Name,Values=SimpleVPN" "Name=instance-state-name,Values=pending,running" \
        --query "Reservations[].Instances[].PublicIpAddress" --output text | head -n1)
    ID=$(aws ec2 describe-instances --region "$REGION" \
        --filters "Name=tag:Name,Values=SimpleVPN" "Name=instance-state-name,Values=pending,running" \
        --query "Reservations[].Instances[].InstanceId" --output text | head -n1)
    echo "‚úÖ –Ü–Ω—Å—Ç–∞–Ω—Å: $ID"
    echo "üåê IP: $IP"
    echo "üîë ssh -i ${KEY_NAME}.pem ubuntu@$IP"
    rm -f "$USER_DATA_FILE"
}

list_instances_all_regions() {
    get_regions
    echo "== –°–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ –ø–æ –≤—Å—ñ—Ö —Ä–µ–≥—ñ–æ–Ω–∞—Ö =="
    for r in "${REGIONS[@]}"; do
        echo "---- $r ----"
        aws ec2 describe-instances --region "$r" \
            --query "Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress,Tags[?Key=='Name'].Value|[0]]" \
            --output table || true
    done
}

stop_instance() {
    select_region
    read -rp "–í–≤–µ–¥–∏ InstanceId: " IID
    aws ec2 stop-instances --instance-ids "$IID" --region "$REGION" --output table
}

terminate_instance() {
    select_region
    read -rp "–í–≤–µ–¥–∏ InstanceId: " IID
    aws ec2 terminate-instances --instance-ids "$IID" --region "$REGION" --output table
}

check_port() {
    read -rp "IP: " IP
    read -rp "–ü–æ—Ä—Ç: " PORT
    if timeout 3 bash -c "cat < /dev/null > /dev/tcp/$IP/$PORT" 2>/dev/null; then
        echo "‚úÖ $IP:$PORT –≤—ñ–¥–∫—Ä–∏—Ç–∏–π"
    else
        echo "‚ùå $IP:$PORT –∑–∞–∫—Ä–∏—Ç–∏–π/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
}

main_menu() {
    require_aws
    while true; do
        clear
        echo "=== AWS –ú–µ–Ω—é ==="
        echo "1) –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤ (–≤—Å—ñ —Ä–µ–≥—ñ–æ–Ω–∏)"
        echo "2) –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å SimpleVPN"
        echo "3) –ó—É–ø–∏–Ω–∏—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å"
        echo "4) –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å"
        echo "5) –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ –∑–∞ —Å–ø–∏—Å–∫–æ–º"
        echo "6) –í–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ –∑–∞ —ñ–º'—è–º"
        echo "7) –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ä—Ç"
        echo "0) –í–∏—Ö—ñ–¥"
        read -rp "–í–∏–±—ñ—Ä: " ACTION
        case "$ACTION" in
            1) list_instances_all_regions; pause ;;
            2) create_instance; pause ;;
            3) stop_instance; pause ;;
            4) terminate_instance; pause ;;
            5) terminate_instances_bulk; pause ;;
            6) terminate_instances_by_name; pause ;;
            7) check_port; pause ;;
            0) exit 0 ;;
            *) echo "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–±—ñ—Ä!"; pause ;;
        esac
    done
}

main_menu